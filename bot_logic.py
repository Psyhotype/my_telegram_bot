# bot_logic.py
import logging
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import Optional

import telebot
from telebot import types

from config import Config
from services.schedule_service import ScheduleService
from services.storage_service import StorageService

logger = logging.getLogger(__name__)

COMMANDS_LIST = [
    ("start", "–ü—Ä–∏–≤—è–∑–∞—Ç—å –±–æ—Ç–∞ –∫ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ."),
    ("stop", "–û—Ç–≤—è–∑–∞—Ç—å –±–æ—Ç–∞ –æ—Ç —Ç–µ–º—ã."),
    ("schedule", "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å."),
    ("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
]


class SchedulerBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–≤—è–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É Telegram
    —Å —Å–µ—Ä–≤–∏—Å–Ω—ã–º —Å–ª–æ–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    def __init__(
        self,
        config: Config,
        bot: telebot.TeleBot,
        storage: StorageService,
        schedule: ScheduleService
    ):
        self.config = config
        self.telebot = bot
        self.storage = storage
        self.schedule = schedule
        self.tz = ZoneInfo(self.config.timezone)
        self._stop_event = threading.Event()
        self._scheduler_thread: Optional[threading.Thread] = None

    def _send_daily_schedule(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é —Ç–µ–º—É."""
        active_topic = self.storage.get_active_topic()
        if not active_topic:
            logger.warning("–ü—Ä–æ–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: –±–æ—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–º–µ.")
            return

        chat_id = active_topic['chat_id']
        thread_id = active_topic['thread_id']

        try:
            now = datetime.now(self.tz)
            day_index = now.weekday()
            message_text = self.schedule.get_schedule_for_day(day_index)
            if not message_text:
                message_text = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

            self.telebot.send_message(chat_id, message_text, message_thread_id=thread_id)
            self.storage.set_last_sent_date(now.strftime("%Y-%m-%d"))
            logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–º—É {thread_id} —á–∞—Ç–∞ {chat_id}.")
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

    def _schedule_checker(self) -> None:
        """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –Ω–∞ {self.config.target_time} {self.config.timezone}.")
        while not self._stop_event.is_set():
            try:
                now = datetime.now(self.tz)
                last_sent = self.storage.get_last_sent_date()
                is_time_to_send = now.strftime("%H:%M") == self.config.target_time
                is_not_sent_today = last_sent != now.strftime("%Y-%m-%d")

                if is_time_to_send and is_not_sent_today:
                    logger.info("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç–∞–ª–æ. –ó–∞–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É.")
                    self._send_daily_schedule()
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")

            # –û–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –¥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self._stop_event.wait(60)
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤."""

        @self.telebot.message_handler(commands=['start'])
        def _cmd_start(message: types.Message):
            if message.is_topic_message and message.message_thread_id:
                topic_info = {'chat_id': message.chat.id, 'thread_id': message.message_thread_id}
                self.storage.save_active_topic(topic_info)
                self.telebot.reply_to(message,
                                      "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–π —Ç–µ–º–µ.\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞ –≤ 9:00 –ú–°–ö.")
            else:
                self.telebot.reply_to(message,
                                      "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤–Ω—É—Ç—Ä–∏ –Ω—É–∂–Ω–æ–π —Ç–µ–º—ã (—Ç–æ–ø–∏–∫–∞) –≤ –≥—Ä—É–ø–ø–µ.")

        @self.telebot.message_handler(commands=['stop'])
        def _cmd_stop(message: types.Message):
            self.storage.save_active_topic(None)
            self.telebot.reply_to(message, "‚ùå –ë–æ—Ç –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —Ç–µ–º—ã. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞.")

        @self.telebot.message_handler(commands=['help'])
        def _cmd_help(message: types.Message):
            text = "‚ÑπÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n" + "\n".join([f"/{cmd} ‚Äî {desc}" for cmd, desc in COMMANDS_LIST])
            self.telebot.reply_to(message, text, parse_mode="Markdown")

        @self.telebot.message_handler(commands=['schedule'])
        def _cmd_schedule(message: types.Message):
            markup = types.InlineKeyboardMarkup(row_width=3)
            buttons = [
                types.InlineKeyboardButton(f"üìÖ {day_name}", callback_data=f"day_{i}")
                for i, day_name in enumerate(["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"])
            ]
            markup.add(*buttons)
            self.telebot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup,
                                      message_thread_id=message.message_thread_id)

        @self.telebot.callback_query_handler(func=lambda call: call.data.startswith("day_"))
        def _callback_schedule(call: types.CallbackQuery):
            try:
                day_index = int(call.data.split("_")[1])
                text = self.schedule.get_schedule_for_day(day_index)
                if not text:
                    text = "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

                self.telebot.answer_callback_query(call.id)
                self.telebot.send_message(call.message.chat.id, text, message_thread_id=call.message.message_thread_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback'–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
                self.telebot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –≤—Å–µ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã."""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            bot_commands = [types.BotCommand(cmd, desc) for cmd, desc in COMMANDS_LIST]
            self.telebot.set_my_commands(bot_commands)
            logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –º–µ–Ω—é.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")

        self._register_handlers()

        # daemon=True –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –Ω–µ –∂–¥–∞–ª —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏,
        # –Ω–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–µ–ª–∞–µ–º .join() –≤ –º–µ—Ç–æ–¥–µ stop() –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
        self._scheduler_thread = threading.Thread(target=self._schedule_checker, daemon=True)
        self._scheduler_thread.start()

        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
        self.telebot.infinity_polling(skip_pending=True)
        logger.info("–ë–æ—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª —Ä–∞–±–æ—Ç—É.")

    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –∏ –µ–≥–æ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
        self._stop_event.set()
        self.telebot.stop_polling()
        if self._scheduler_thread and self._scheduler_thread.is_alive():
            self._scheduler_thread.join(timeout=5)
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")